generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Adjust to your database provider (e.g., "postgresql")
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String    @db.VarChar(50)
  lastName    String    @db.VarChar(50)
  password    String    @db.VarChar(255)
  username    String    @unique @db.VarChar(50)
  email       String    @unique @db.VarChar(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  profile     Profile?
  userRoles   UserRole[]
  notifications Notification[]
  enrollments Enrollment[]
  reviews     Review[]
  certificates Certificate[]
  payments    Payment[]
  wishlist    Wishlist[]
}

model Profile {
  userId       Int       @id @map("userid")
  imageUrl     String?   @db.VarChar(255)
  tgLink       String?   @db.VarChar(255)
  linkedinLink String?   @db.VarChar(255)
  phoneNumber  String?   @db.VarChar(15)

  user         User      @relation(fields: [userId], references: [id])
  instructor   Instructor?
}

model Instructor {
  profileId Int      @id @map("profileid")
  bio       String?  @db.Text

  profile   Profile  @relation(fields: [profileId], references: [userId])
  courses   Course[]
}

model Course {
  id          Int       @id @default(autoincrement())
  courseName  String    @db.VarChar(100)
  imageUrl    String?   @db.VarChar(255)
  price       Decimal   @db.Decimal(10, 2)
  categoryId  Int

  instructorId Int
  instructor   Instructor @relation(fields: [instructorId], references: [profileId])
  category     Category   @relation(fields: [categoryId], references: [id])
  courseInfo   CourseInfo?
  sections     Section[]
  reviews      Review[]
  enrollments  Enrollment[]
  wishlist     Wishlist[]
  tags         CourseTag[]

  CourseIntro CourseIntro[]

  Certificate Certificate[]

  Payment Payment[]
}

model CourseInfo {
  id           Int        @id @default(autoincrement())
  prerequisite String?    @db.Text
  description  String     @db.Text

  courseId     Int @unique
  course       Course     @relation(fields: [courseId], references: [id])
  objectives   CourseObjective[]
}

model CourseObjective {
  id           Int        @id @default(autoincrement())
  objective    String     @db.Text

  courseInfoId Int
  courseInfo   CourseInfo @relation(fields: [courseInfoId], references: [id])
}

model CourseIntro {
  id        Int    @id @default(autoincrement())
  videoUrl  String @db.VarChar(255)
  outline   String? @db.Text

  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])
}

model Category {
  id       Int     @id @default(autoincrement())
  name     String  @unique @db.VarChar(50)
  courses  Course[]
}

model Role {
  id       Int        @id @default(autoincrement())
  roleName String     @unique @db.VarChar(50)
  userRoles UserRole[]
}

model UserRole {
  id      Int    @id @default(autoincrement())
  roleId  Int
  userId  Int

  role    Role  @relation(fields: [roleId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  type      String   @db.VarChar(50)
  createdAt DateTime @default(now())
  seen      Boolean  @default(false)

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Section {
  id           Int      @id @default(autoincrement())
  sectionName  String   @db.VarChar(100)
  objective    String?  @db.Text
  position     Int

  courseId     Int
  course       Course   @relation(fields: [courseId], references: [id])
  videos       Video[]
  pdfs         Pdf[]
}

model Wishlist {
  id       Int    @id @default(autoincrement())
  courseId Int
  userId   Int

  course   Course @relation(fields: [courseId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model Pdf {
  id          Int    @id @default(autoincrement())
  description String? @db.Text
  pdfUrl      String @db.VarChar(255)

  sectionId   Int
  section     Section @relation(fields: [sectionId], references: [id])
}

model Video {
  id          Int    @id @default(autoincrement())
  description String? @db.Text
  videoUrl    String @db.VarChar(255)

  sectionId   Int
  section     Section @relation(fields: [sectionId], references: [id])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId    Int
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model Tag {
  id      Int         @id @default(autoincrement())
  name    String      @unique @db.VarChar(50)
  courses CourseTag[]
}

model CourseTag {
  id       Int    @id @default(autoincrement())
  courseId Int
  tagId    Int

  course   Course @relation(fields: [courseId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])
}

model Review {
  id            Int      @id @default(autoincrement())
  rating        Int      @db.TinyInt
  reviewMessage String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  courseId      Int
  userId        Int
  course        Course   @relation(fields: [courseId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Certificate {
  id             Int      @id @default(autoincrement())
  certificateUrl String   @db.VarChar(255)
  createdAt      DateTime @default(now())

  userId         Int
  courseId       Int
  user           User     @relation(fields: [userId], references: [id])
  course         Course   @relation(fields: [courseId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  userId    Int
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  Refund Refund[]
}

model Refund {
  id         Int      @id @default(autoincrement())
  reason     String   @db.Text
  createdAt  DateTime @default(now())

  paymentId  Int
  payment    Payment  @relation(fields: [paymentId], references: [id])
}
